#!/usr/bin/perl

# The sequence of triangle numbers is generated by adding the natural numbers. So
# the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten 
# terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

use strict;
use warnings;

my $current_term = 0;

for ( my $i = 1; ; $i++ )
{
    my @factors = ();
    
    $current_term += $i;

    @factors = get_factors( $current_term );

    if ( $current_term % 100 == 0 )
    {
        #print "$current_term - $#factors - @factors\n";
        print "$current_term - $#factors \n";
    }

    if ( scalar @factors > 500 )
    {
        print "answer = $current_term\n";
        last;
    }
}

# We know that every number has 1 and itself as a factor so we include those
# in @factors to begin with.  Now we start adding pairs of factors to the list
# by incrementing up from 2 and testing with modulus.  The larger factor is added to
# the end of the list and as long as $i remains smaller that the factor at the end 
# then we can keep testing.  If $i becomes >= than the factor on the end then
# we have reached the sqrt and can stop testing, confident that we have all the factors.
sub get_factors
{
    my $number = shift @_;
    my @factors = ( 1, $number );

    for ( my $i = 2; $i <= $factors[-1]; $i++ )
    {
        if ( $number % $i == 0 )
        {
            push @factors, $i;
            push @factors, $number / $i;
        }
    }

    return @factors;
}

__END__
